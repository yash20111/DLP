#include <iostream>
#include <sstream>
#include <vector>
#include <stack>
#include <map>

using namespace std;

struct Quadruple {
    string op, arg1, arg2, result;
};

vector<Quadruple> generateQuadruples(const string &expression) {
    map<char, int> precedence = {{'+', 1}, {'-', 1}, {'*', 2}, {'/', 2}};
    vector<Quadruple> output;
    stack<char> operators;
    stack<string> operands;
    int tempCounter = 1;

    istringstream iss(expression);
    string token;
    while (iss >> token) {
        if (isdigit(token[0])) {
            operands.push(token);
        } else if (precedence.count(token[0])) {
            while (!operators.empty() && operators.top() != '(' &&
                   precedence[operators.top()] >= precedence[token[0]]) {
                char op = operators.top(); operators.pop();
                string right = operands.top(); operands.pop();
                string left = operands.top(); operands.pop();
                string tempVar = "t" + to_string(tempCounter++);
                output.push_back({string(1, op), left, right, tempVar});
                operands.push(tempVar);
            }
            operators.push(token[0]);
        } else if (token == "(") {
            operators.push('(');
        } else if (token == ")") {
            while (!operators.empty() && operators.top() != '(') {
                char op = operators.top(); operators.pop();
                string right = operands.top(); operands.pop();
                string left = operands.top(); operands.pop();
                string tempVar = "t" + to_string(tempCounter++);
                output.push_back({string(1, op), left, right, tempVar});
                operands.push(tempVar);
            }
            operators.pop();
        }
    }

    while (!operators.empty()) {
        char op = operators.top(); operators.pop();
        string right = operands.top(); operands.pop();
        string left = operands.top(); operands.pop();
        string tempVar = "t" + to_string(tempCounter++);
        output.push_back({string(1, op), left, right, tempVar});
        operands.push(tempVar);
    }

    return output;
}

int main() {
    string expression = "9 + 42 * 8";
    vector<Quadruple> quadruples = generateQuadruples(expression);

    cout << "\nQuadruple Representation:" << endl;
    cout << "--------------------------------------" << endl;
    cout << "Operator   Operand1   Operand2   Result" << endl;
    cout << "--------------------------------------" << endl;
    for (const auto &quad : quadruples) {
        cout << quad.op << "          " << quad.arg1 << "          " << quad.arg2 << "          " << quad.result << endl;
    }
    return 0;
}
